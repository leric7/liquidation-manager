/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LiquidationManagerInterface extends ethers.utils.Interface {
  functions: {
    "changeOpenseaAuctionDuration(uint256)": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "fulfillOpenseaOrder(address,uint256,(address,address,address,uint256,uint256,uint256,uint256,address,uint8,uint8,uint8,address,uint8,bytes,bytes,address,bytes,address,uint256,uint256,uint256,uint256,uint256),(address,address,address,uint256,uint256,uint256,uint256,address,uint8,uint8,uint8,address,uint8,bytes,bytes,address,bytes,address,uint256,uint256,uint256,uint256,uint256),uint8[2],bytes32[5])": FunctionFragment;
    "liquidate(address,uint256)": FunctionFragment;
    "liquidations(address,uint256)": FunctionFragment;
    "mintNFTX(address,uint256)": FunctionFragment;
    "nftXVaultFactory()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "openseaAuctionDuration()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "wyvernExchange()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "changeOpenseaAuctionDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillOpenseaOrder",
    values: [
      string,
      BigNumberish,
      {
        exchange: string;
        maker: string;
        taker: string;
        makerRelayerFee: BigNumberish;
        takerRelayerFee: BigNumberish;
        makerProtocolFee: BigNumberish;
        takerProtocolFee: BigNumberish;
        feeRecipient: string;
        feeMethod: BigNumberish;
        side: BigNumberish;
        saleKind: BigNumberish;
        target: string;
        howToCall: BigNumberish;
        bCalldata: BytesLike;
        replacementPattern: BytesLike;
        staticTarget: string;
        staticExtradata: BytesLike;
        paymentToken: string;
        basePrice: BigNumberish;
        extra: BigNumberish;
        listingTime: BigNumberish;
        expirationTime: BigNumberish;
        salt: BigNumberish;
      },
      {
        exchange: string;
        maker: string;
        taker: string;
        makerRelayerFee: BigNumberish;
        takerRelayerFee: BigNumberish;
        makerProtocolFee: BigNumberish;
        takerProtocolFee: BigNumberish;
        feeRecipient: string;
        feeMethod: BigNumberish;
        side: BigNumberish;
        saleKind: BigNumberish;
        target: string;
        howToCall: BigNumberish;
        bCalldata: BytesLike;
        replacementPattern: BytesLike;
        staticTarget: string;
        staticExtradata: BytesLike;
        paymentToken: string;
        basePrice: BigNumberish;
        extra: BigNumberish;
        listingTime: BigNumberish;
        expirationTime: BigNumberish;
        salt: BigNumberish;
      },
      [BigNumberish, BigNumberish],
      [BytesLike, BytesLike, BytesLike, BytesLike, BytesLike]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidations",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintNFTX",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nftXVaultFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "openseaAuctionDuration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "wyvernExchange",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "changeOpenseaAuctionDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fulfillOpenseaOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintNFTX", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftXVaultFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openseaAuctionDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wyvernExchange",
    data: BytesLike
  ): Result;

  events: {
    "OpenseaAuctionDurationUpdated(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SoldOnNFTX(address,uint256,uint256)": EventFragment;
    "SoldOnOpensea(address,uint256)": EventFragment;
    "TokenLiquidated(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "OpenseaAuctionDurationUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SoldOnNFTX"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SoldOnOpensea"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenLiquidated"): EventFragment;
}

export type OpenseaAuctionDurationUpdatedEvent = TypedEvent<
  [BigNumber] & { openseaAuctionDuration: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type SoldOnNFTXEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    tokenAddress: string;
    tokenId: BigNumber;
    amount: BigNumber;
  }
>;

export type SoldOnOpenseaEvent = TypedEvent<
  [string, BigNumber] & { tokenAddress: string; tokenId: BigNumber }
>;

export type TokenLiquidatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    tokenAddress: string;
    tokenId: BigNumber;
    liquidatedAt: BigNumber;
    openseaAuctionDuration: BigNumber;
  }
>;

export class LiquidationManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LiquidationManagerInterface;

  functions: {
    changeOpenseaAuctionDuration(
      _newOpenseaAuctionDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fulfillOpenseaOrder(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      buyOrder: {
        exchange: string;
        maker: string;
        taker: string;
        makerRelayerFee: BigNumberish;
        takerRelayerFee: BigNumberish;
        makerProtocolFee: BigNumberish;
        takerProtocolFee: BigNumberish;
        feeRecipient: string;
        feeMethod: BigNumberish;
        side: BigNumberish;
        saleKind: BigNumberish;
        target: string;
        howToCall: BigNumberish;
        bCalldata: BytesLike;
        replacementPattern: BytesLike;
        staticTarget: string;
        staticExtradata: BytesLike;
        paymentToken: string;
        basePrice: BigNumberish;
        extra: BigNumberish;
        listingTime: BigNumberish;
        expirationTime: BigNumberish;
        salt: BigNumberish;
      },
      sellOrder: {
        exchange: string;
        maker: string;
        taker: string;
        makerRelayerFee: BigNumberish;
        takerRelayerFee: BigNumberish;
        makerProtocolFee: BigNumberish;
        takerProtocolFee: BigNumberish;
        feeRecipient: string;
        feeMethod: BigNumberish;
        side: BigNumberish;
        saleKind: BigNumberish;
        target: string;
        howToCall: BigNumberish;
        bCalldata: BytesLike;
        replacementPattern: BytesLike;
        staticTarget: string;
        staticExtradata: BytesLike;
        paymentToken: string;
        basePrice: BigNumberish;
        extra: BigNumberish;
        listingTime: BigNumberish;
        expirationTime: BigNumberish;
        salt: BigNumberish;
      },
      _vs: [BigNumberish, BigNumberish],
      _rssMetadata: [BytesLike, BytesLike, BytesLike, BytesLike, BytesLike],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidate(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidations(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, boolean] & {
        liquidatedAt: BigNumber;
        soldOnOpensea: boolean;
        soldOnNFTX: boolean;
      }
    >;

    mintNFTX(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nftXVaultFactory(overrides?: CallOverrides): Promise<[string]>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openseaAuctionDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wyvernExchange(overrides?: CallOverrides): Promise<[string]>;
  };

  changeOpenseaAuctionDuration(
    _newOpenseaAuctionDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _tokenAddress: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fulfillOpenseaOrder(
    _tokenAddress: string,
    _tokenId: BigNumberish,
    buyOrder: {
      exchange: string;
      maker: string;
      taker: string;
      makerRelayerFee: BigNumberish;
      takerRelayerFee: BigNumberish;
      makerProtocolFee: BigNumberish;
      takerProtocolFee: BigNumberish;
      feeRecipient: string;
      feeMethod: BigNumberish;
      side: BigNumberish;
      saleKind: BigNumberish;
      target: string;
      howToCall: BigNumberish;
      bCalldata: BytesLike;
      replacementPattern: BytesLike;
      staticTarget: string;
      staticExtradata: BytesLike;
      paymentToken: string;
      basePrice: BigNumberish;
      extra: BigNumberish;
      listingTime: BigNumberish;
      expirationTime: BigNumberish;
      salt: BigNumberish;
    },
    sellOrder: {
      exchange: string;
      maker: string;
      taker: string;
      makerRelayerFee: BigNumberish;
      takerRelayerFee: BigNumberish;
      makerProtocolFee: BigNumberish;
      takerProtocolFee: BigNumberish;
      feeRecipient: string;
      feeMethod: BigNumberish;
      side: BigNumberish;
      saleKind: BigNumberish;
      target: string;
      howToCall: BigNumberish;
      bCalldata: BytesLike;
      replacementPattern: BytesLike;
      staticTarget: string;
      staticExtradata: BytesLike;
      paymentToken: string;
      basePrice: BigNumberish;
      extra: BigNumberish;
      listingTime: BigNumberish;
      expirationTime: BigNumberish;
      salt: BigNumberish;
    },
    _vs: [BigNumberish, BigNumberish],
    _rssMetadata: [BytesLike, BytesLike, BytesLike, BytesLike, BytesLike],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidate(
    _tokenAddress: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidations(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, boolean] & {
      liquidatedAt: BigNumber;
      soldOnOpensea: boolean;
      soldOnNFTX: boolean;
    }
  >;

  mintNFTX(
    _tokenAddress: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nftXVaultFactory(overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    operator: string,
    from: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openseaAuctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wyvernExchange(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    changeOpenseaAuctionDuration(
      _newOpenseaAuctionDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fulfillOpenseaOrder(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      buyOrder: {
        exchange: string;
        maker: string;
        taker: string;
        makerRelayerFee: BigNumberish;
        takerRelayerFee: BigNumberish;
        makerProtocolFee: BigNumberish;
        takerProtocolFee: BigNumberish;
        feeRecipient: string;
        feeMethod: BigNumberish;
        side: BigNumberish;
        saleKind: BigNumberish;
        target: string;
        howToCall: BigNumberish;
        bCalldata: BytesLike;
        replacementPattern: BytesLike;
        staticTarget: string;
        staticExtradata: BytesLike;
        paymentToken: string;
        basePrice: BigNumberish;
        extra: BigNumberish;
        listingTime: BigNumberish;
        expirationTime: BigNumberish;
        salt: BigNumberish;
      },
      sellOrder: {
        exchange: string;
        maker: string;
        taker: string;
        makerRelayerFee: BigNumberish;
        takerRelayerFee: BigNumberish;
        makerProtocolFee: BigNumberish;
        takerProtocolFee: BigNumberish;
        feeRecipient: string;
        feeMethod: BigNumberish;
        side: BigNumberish;
        saleKind: BigNumberish;
        target: string;
        howToCall: BigNumberish;
        bCalldata: BytesLike;
        replacementPattern: BytesLike;
        staticTarget: string;
        staticExtradata: BytesLike;
        paymentToken: string;
        basePrice: BigNumberish;
        extra: BigNumberish;
        listingTime: BigNumberish;
        expirationTime: BigNumberish;
        salt: BigNumberish;
      },
      _vs: [BigNumberish, BigNumberish],
      _rssMetadata: [BytesLike, BytesLike, BytesLike, BytesLike, BytesLike],
      overrides?: CallOverrides
    ): Promise<void>;

    liquidate(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidations(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, boolean] & {
        liquidatedAt: BigNumber;
        soldOnOpensea: boolean;
        soldOnNFTX: boolean;
      }
    >;

    mintNFTX(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    nftXVaultFactory(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    openseaAuctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    wyvernExchange(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OpenseaAuctionDurationUpdated(uint256)"(
      openseaAuctionDuration?: null
    ): TypedEventFilter<[BigNumber], { openseaAuctionDuration: BigNumber }>;

    OpenseaAuctionDurationUpdated(
      openseaAuctionDuration?: null
    ): TypedEventFilter<[BigNumber], { openseaAuctionDuration: BigNumber }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "SoldOnNFTX(address,uint256,uint256)"(
      tokenAddress?: string | null,
      tokenId?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { tokenAddress: string; tokenId: BigNumber; amount: BigNumber }
    >;

    SoldOnNFTX(
      tokenAddress?: string | null,
      tokenId?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { tokenAddress: string; tokenId: BigNumber; amount: BigNumber }
    >;

    "SoldOnOpensea(address,uint256)"(
      tokenAddress?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { tokenAddress: string; tokenId: BigNumber }
    >;

    SoldOnOpensea(
      tokenAddress?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { tokenAddress: string; tokenId: BigNumber }
    >;

    "TokenLiquidated(address,uint256,uint256,uint256)"(
      tokenAddress?: string | null,
      tokenId?: BigNumberish | null,
      liquidatedAt?: null,
      openseaAuctionDuration?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        tokenAddress: string;
        tokenId: BigNumber;
        liquidatedAt: BigNumber;
        openseaAuctionDuration: BigNumber;
      }
    >;

    TokenLiquidated(
      tokenAddress?: string | null,
      tokenId?: BigNumberish | null,
      liquidatedAt?: null,
      openseaAuctionDuration?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        tokenAddress: string;
        tokenId: BigNumber;
        liquidatedAt: BigNumber;
        openseaAuctionDuration: BigNumber;
      }
    >;
  };

  estimateGas: {
    changeOpenseaAuctionDuration(
      _newOpenseaAuctionDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fulfillOpenseaOrder(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      buyOrder: {
        exchange: string;
        maker: string;
        taker: string;
        makerRelayerFee: BigNumberish;
        takerRelayerFee: BigNumberish;
        makerProtocolFee: BigNumberish;
        takerProtocolFee: BigNumberish;
        feeRecipient: string;
        feeMethod: BigNumberish;
        side: BigNumberish;
        saleKind: BigNumberish;
        target: string;
        howToCall: BigNumberish;
        bCalldata: BytesLike;
        replacementPattern: BytesLike;
        staticTarget: string;
        staticExtradata: BytesLike;
        paymentToken: string;
        basePrice: BigNumberish;
        extra: BigNumberish;
        listingTime: BigNumberish;
        expirationTime: BigNumberish;
        salt: BigNumberish;
      },
      sellOrder: {
        exchange: string;
        maker: string;
        taker: string;
        makerRelayerFee: BigNumberish;
        takerRelayerFee: BigNumberish;
        makerProtocolFee: BigNumberish;
        takerProtocolFee: BigNumberish;
        feeRecipient: string;
        feeMethod: BigNumberish;
        side: BigNumberish;
        saleKind: BigNumberish;
        target: string;
        howToCall: BigNumberish;
        bCalldata: BytesLike;
        replacementPattern: BytesLike;
        staticTarget: string;
        staticExtradata: BytesLike;
        paymentToken: string;
        basePrice: BigNumberish;
        extra: BigNumberish;
        listingTime: BigNumberish;
        expirationTime: BigNumberish;
        salt: BigNumberish;
      },
      _vs: [BigNumberish, BigNumberish],
      _rssMetadata: [BytesLike, BytesLike, BytesLike, BytesLike, BytesLike],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidate(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidations(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintNFTX(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nftXVaultFactory(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openseaAuctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wyvernExchange(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    changeOpenseaAuctionDuration(
      _newOpenseaAuctionDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fulfillOpenseaOrder(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      buyOrder: {
        exchange: string;
        maker: string;
        taker: string;
        makerRelayerFee: BigNumberish;
        takerRelayerFee: BigNumberish;
        makerProtocolFee: BigNumberish;
        takerProtocolFee: BigNumberish;
        feeRecipient: string;
        feeMethod: BigNumberish;
        side: BigNumberish;
        saleKind: BigNumberish;
        target: string;
        howToCall: BigNumberish;
        bCalldata: BytesLike;
        replacementPattern: BytesLike;
        staticTarget: string;
        staticExtradata: BytesLike;
        paymentToken: string;
        basePrice: BigNumberish;
        extra: BigNumberish;
        listingTime: BigNumberish;
        expirationTime: BigNumberish;
        salt: BigNumberish;
      },
      sellOrder: {
        exchange: string;
        maker: string;
        taker: string;
        makerRelayerFee: BigNumberish;
        takerRelayerFee: BigNumberish;
        makerProtocolFee: BigNumberish;
        takerProtocolFee: BigNumberish;
        feeRecipient: string;
        feeMethod: BigNumberish;
        side: BigNumberish;
        saleKind: BigNumberish;
        target: string;
        howToCall: BigNumberish;
        bCalldata: BytesLike;
        replacementPattern: BytesLike;
        staticTarget: string;
        staticExtradata: BytesLike;
        paymentToken: string;
        basePrice: BigNumberish;
        extra: BigNumberish;
        listingTime: BigNumberish;
        expirationTime: BigNumberish;
        salt: BigNumberish;
      },
      _vs: [BigNumberish, BigNumberish],
      _rssMetadata: [BytesLike, BytesLike, BytesLike, BytesLike, BytesLike],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidate(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidations(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintNFTX(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nftXVaultFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openseaAuctionDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wyvernExchange(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
