/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "EIP712Base",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP712Base__factory>;
    getContractFactory(
      name: "NativeMetaTransaction",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NativeMetaTransaction__factory>;
    getContractFactory(
      name: "INFTXEligibility",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INFTXEligibility__factory>;
    getContractFactory(
      name: "INFTXVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INFTXVault__factory>;
    getContractFactory(
      name: "INFTXVaultFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INFTXVaultFactory__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "IWyvernExchange",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWyvernExchange__factory>;
    getContractFactory(
      name: "LiquidationManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LiquidationManager__factory>;
    getContractFactory(
      name: "WyvernExchangeFake",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WyvernExchangeFake__factory>;
    getContractFactory(
      name: "Creature",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Creature__factory>;
    getContractFactory(
      name: "ERC721Tradable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Tradable__factory>;
    getContractFactory(
      name: "ProxyRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyRegistry__factory>;

    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "EIP712Base",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP712Base>;
    getContractAt(
      name: "NativeMetaTransaction",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NativeMetaTransaction>;
    getContractAt(
      name: "INFTXEligibility",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INFTXEligibility>;
    getContractAt(
      name: "INFTXVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INFTXVault>;
    getContractAt(
      name: "INFTXVaultFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INFTXVaultFactory>;
    getContractAt(
      name: "IBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "IWyvernExchange",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWyvernExchange>;
    getContractAt(
      name: "LiquidationManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LiquidationManager>;
    getContractAt(
      name: "WyvernExchangeFake",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WyvernExchangeFake>;
    getContractAt(
      name: "Creature",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Creature>;
    getContractAt(
      name: "ERC721Tradable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Tradable>;
    getContractAt(
      name: "ProxyRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyRegistry>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
